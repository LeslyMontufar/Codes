kill(all);
erroinstrumentox : 0.05*float(%pi);/*erro humano*/
erroinstrumentoy : 0.01;

x:[2*float(%pi), 4*float(%pi), 6*float(%pi), 8*float(%pi), 10*float(%pi)];/*modificavel*/
numx: length(x);

ytabelado: matrix([13.50, 13.71, 13.57, 13.25, 12.59],
[19.17, 19.44, 19.23, 18.93, 18.30],    
[23.53, 23.88, 24.85, 23.27, 22.77],    
[27.29, 27.56, 29.20, 27.11, 26.48],
[30.69, 30.93, 32.55, 30.38, 29.80]
);/*modificavel*/
numy: length(ytabelado[1]);


/*y medios*/
array([y, dpmy, erry, errx, derivadaparcialx], 1, numx);
array([xllog, yllog, errxllog, erryllog],1,numx);

xLog(varx):= log(varx);/*modificavel*/
yLog(vary):= log(vary);/*modificavel*/
derivadaparcialxLog(var):=diff(xLog(var), var);
derivadaparcialyLog(var):=diff(yLog(var), var);

for index:1 thru numx step 1 do(
    y[1,index]: sum(ytabelado[index,i], i, 1, numy)/numy,
    dpmy[1,index]: sqrt(sum((ytabelado[index, i]-y[1, index])^2,i,1,numy)/(numy-1))/float(sqrt(numy)),
    erry[1,index]: erroinstrumentoy,
    erry[1,index]: sqrt(dpmy[1,index]^2+erry[1,index]^2),/*o erro em y alem de instrumental eh estatistico*/
    errx[1,index]: erroinstrumentox,
    
    xllog[1,index]: xLog(x[index]),
    yllog[1,index]: yLog(y[1,index]),
    errxllog[1,index]: sqrt((at(derivadaparcialxLog(var),[var=xllog[1,index]])*errx[1,index])^2),
    erryllog[1,index]: sqrt((at(derivadaparcialyLog(var),[var=yllog[1,index]])*erry[1,index])^2)
)$

/*printa resultados da Tabela 2*/
"Tabela 2:";
for index:1 thru numx step 1 do(
    print("y: ",y[1,index], "
            dpmy:", dpmy[1,index], "
            erroy:", erry[1,index])
)$


/*printa resultados da Tabela 3*/
"Tabela 3: Linearização usando logaritmos ";
for index:1 thru numx step 1 do(
    print("X= ln(x): ",xllog[1,index], "
            Y= ln(y):", yllog[1,index], "
            erroX:", errxllog[1,index],"
            errroY:", erryllog[1,index])
)$

/*reta de regressao linear*/
array([w],1,numx);/*modificavel*/
array([E,F,G,H,J,D,a,b,erra,errb],1,1); /*modificavel*/
for index:1 thru numx step 1 do(
    w[1,index]: 1/(erryllog[1,index]^2)
);

/* agora o w é um array unidimensional */
for index:1 thru 1 step 1 do(
        E[1,index]:sum(w[index,i], i, 1, numx),
        F[1,index]:sum(w[index,i]*xllog[1,i], i, 1,numx),
        G[1,index]:sum((w[index,i]*yllog[1,i]), i,1,numx),
        H[1,index]:sum(w[index,i]*xllog[1,i]*xllog[1,i], i, 1,numx),
        J[1,index]:sum((w[index,i]*xllog[1,i]*yllog[1,i]), i, 1,numx),
    
    
    D[1,index]: E[1,index]*H[1,index]-F[1,index]*F[1,index],

    a[1,index]:(E[1,index]*J[1,index]-G[1,index]*F[1,index])/D[1,index],
    b[1,index]:(G[1,index]*H[1,index]-J[1,index]*F[1,index])/D[1,index],
    erra[1,index]:sqrt(E[1,index]/D[1,index]),
    errb[1,index]:sqrt(H[1,index]/D[1,index])
)$

/*printa os coeficientes da reta de regressao e seus respectivos erros*/
"Coeficientes da reta de regressao por: Logaritmos (a=0.5)";
for index:1 thru 1 step 1 do( /* só tem 1 erro a e erro b */
    print("a:",a[1,index], "
            b:", b[1,index], "
            err a:", erra[1,index],"
            err b:", errb[1,index])
)$

/* constantes A e n */
n: a[1,1]; errn: erra[1,1];

A(var):= exp(var);
errA:sqrt((at(diff(A(var), var) , [ var=b[1,1] ]) *errb[1,1] )^2); /*o erro de A é o módulo da função derivada parcial em relação à variável b - aplicada em seus valores médios (b médio)- vezes o erro da var b*/

print("n = ", n, "+-",errn, " ");
print("A = ", A(b[1,1]), "+-", errA, " ");

/* Fisica: aceleração angular do movimento circular */
aceleracao(b):= 2/(exp(2*b)); /*modificavel: função para encontrar a grandeza*/

derivadaparcialGrandeza(var):=diff(aceleracao(var),var);

print("Aceleração angular (Logaritmos) = ", aceleracao(b[1,1]), "+-", sqrt((at(derivadaparcialGrandeza(var),[var=b[1,1]])*errb[1,1])^2), " ");
